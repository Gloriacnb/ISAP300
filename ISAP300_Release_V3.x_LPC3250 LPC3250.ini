/*
 * Pythec3250 external SDRAM initialization file
 */

FUNC void system_setup(void)
{
  unsigned int Reg;
  Reg = 0;

  // Disable WDT
  _WDWORD(0x400040BC, 0x00000000);  // TIMCLK_CTRL = 0
  // Init clocks
  _WDWORD(0x40004050, (0x50 << 2)); // SYSCLK_CTRL - Switch to Main oscillator  
  // Set H divider and Per divider
  _WDWORD(0x40004040, 0x0000003D);  // PERIPH_CLK = PLL_CLK*1/16; 
                                    // HCLK = PLL_CLK*1/2;
  // Set HPLL
  _WDWORD(0x40004058, 0x0001601E);  // HCLKPLL_CTRL OSC * 16 = 208MHz

  // Wait until PLL is locked
  _sleep_(10);     
   
  // Switch to PLL output and out form the self-refresh of the SDRAM
  Reg = _RDWORD(0x40004044);        // PWR_CTRL
  Reg &= ~((1 << 9) | (1 << 8));
  Reg |=   (1 << 2);
  _WDWORD(0x40004044, Reg);
  Reg |=   (1 << 8);
  _WDWORD(0x40004044, Reg);
  Reg &=  ~(1 << 8);
  _WDWORD(0x40004044, Reg);
  
  // Disable 397 PLL
  _WDWORD(0x40004048, 0x00000002);  // PLL397_CTRL disable

  // MT48H16M16LF SDR SDRAM timings set
  _WDWORD(0x40028134, 0x00FFFFFF);  // P1_MUX_CLR = 0x00FFFFFF;
  _WDWORD(0x4002802C, 0x00000008);  // EMC_D_SEL = 0;
                                    // SDRAM_D[31:19] are connected to 
                                    // the SDRAM controller.
  // Init SDRAM Controller
  _WDWORD(0x31080000, 0x00000001);  // EMCControl - SDRAM Controller Enable
  _WDWORD(0x31080008, 0x00000000);  // EMCConfig - liitle endian
  _WDWORD(0x40004068, 0x0001C000);  // SDRAMCLK_CTRL  HCLKDELAY = 1.75ns
  _WDWORD(0x31080028, 0x00000011);  // EMCDynamicReadConfig

  _WDWORD(0x31080400, 0x00000000);  // EMCAHBControl0
  _WDWORD(0x31080440, 0x00000000);  // EMCAHBControl2
  _WDWORD(0x31080460, 0x00000000);  // EMCAHBControl3
  _WDWORD(0x31080480, 0x00000000);  // EMCAHBControl4

  _WDWORD(0x31080030, 0x00000001);  // EMCDynamictRP = 1    -  19ns
  _WDWORD(0x31080034, 0x00000003);  // EMCDynamictRAS = 3   -  48ns
  _WDWORD(0x31080038, 0x00000001);  // EMCDynamictSREX = 1  -  80ns
  _WDWORD(0x31080044, 0x00000002);  // EMCDynamictWR = 2    -  15ns
  _WDWORD(0x31080048, 0x00000003);  // EMCDynamictRC = 3    -  80ns
  _WDWORD(0x3108004C, 0x00000003);  // EMCDynamictRFC = 3   -  80ns
  
  _WDWORD(0x31080050, 0x00000005);  // EMCDynamictXSR = 5   -  80ns
  _WDWORD(0x31080054, 0x00000001);  // EMCDynamictRRD = 1   -  16ns
  _WDWORD(0x31080058, 0x00000002);  // EMCDynamictMRD = 2   -  2ckl
  _WDWORD(0x3108005C, 0x00000006);  // EMCDynamicCDLR = 6   -  1ckl
  _WDWORD(0x31080104, 0x00000303);  // EMCDynamicRasCas0

                                    // CAS = 3 - two clock cycles
                                    // RAS = 3 

  _WDWORD(0x31080100, 0x00004680);  // EMCDynamicConfig0
                                    // Standard SDRAM
                                    // 256Mb (16Mx16), 4 banks, row length = 13, column length = 9
  _sleep_(1);
  _WDWORD(0x31080020, 0x00000183);  // EMCDynamicControl = 0x183;        // NOP
  _sleep_(1);
  _WDWORD(0x31080020, 0x00000103);  // EMCDynamicControl_bit.I = 2;     // PRECHARGE ALL
  _sleep_(1);
  _WDWORD(0x31080024, 0x00000002);  // EMCDynamicRefresh = 2;
  _sleep_(1);
  _WDWORD(0x31080024, 0x0000001C);  // EMCDynamicRefresh = (64ms/8192) * 104MHz / 16 = 50
  _WDWORD(0x31080020, 0x00000083);  // EMCDynamicControl_bit.I = 1;     // SDRAM MODE

  // Burst Length, CAS, Burst Type - Sequential
  //_RDWORD(0x80000000|(0x220UL<<13));
  _RDWORD(0x80060000);
  _WDWORD(0x31080020, 0x00000000);  // EMCDynamicControl_bit.I = 0;     // OPERATION
  _sleep_(1);

  // Map IRAM at 0x00000000
  _WDWORD(0x40004014, 0x00000001);  // BOOT_MAP = 1;
  _WDWORD(0x40008000, 0x00000000);	// disable all mic
  _WDWORD(0x4000c000, 0x00000000);	// disable all sic
  _WDWORD(0x40010000, 0x00000000);
}

RESET
system_setup();
LOAD %L INCREMENTAL
PC = 0x80000000;
//g,main
