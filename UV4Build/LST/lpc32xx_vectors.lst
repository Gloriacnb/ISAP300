


ARM Macro Assembler    Page 1 


    1 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
    2 00000000         ; $Id:: lpc32xx_vectors.s 632 2008-04-18 19:46:58Z wells
                       k              $
    3 00000000         ; 
    4 00000000         ; Project: LPC32xx interrupt and exception vectors
    5 00000000         ;
    6 00000000         ; Description:
    7 00000000         ;     Interrupt and exception handler vector layout used
                        by the
    8 00000000         ;     interrupt driver, exception functions, and startup
                        code. This
    9 00000000         ;     block is placed at the start of the ARM memory reg
                       ion at address
   10 00000000         ;     0x00000000 or 0xFFFF0000 (if high vectors are enab
                       led).
   11 00000000         ;
   12 00000000         ; Notes:
   13 00000000         ;     This version of the file is used with the ARM ADS 
                       toolset.
   14 00000000         ;
   15 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   16 00000000         ; Software that is described herein is for illustrative 
                       purposes only  
   17 00000000         ; which provides customers with programming information 
                       regarding the  
   18 00000000         ; products. This software is supplied "AS IS" without an
                       y warranties.  
   19 00000000         ; NXP Semiconductors assumes no responsibility or liabil
                       ity for the 
   20 00000000         ; use of the software, conveys no license or title under
                        any patent, 
   21 00000000         ; copyright, or mask work right to the product. NXP Semi
                       conductors 
   22 00000000         ; reserves the right to make changes in the software wit
                       hout 
   23 00000000         ; notification. NXP Semiconductors also make no represen
                       tation or 
   24 00000000         ; warranty that such application will be suitable for th
                       e specified 
   25 00000000         ; use without further testing or modification. 
   26 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   27 00000000         
   28 00000000                 AREA             |.text|, CODE ; Interrupt and e
                                                            xception vectors 
   29 00000000                 PRESERVE8
   30 00000000                 ARM
   31 00000000         
   32 00000000                 export           lpc32xx_reset_vector
   33 00000000                 export           vec_reset_handler
   34 00000000                 export           vec_undefined_handler
   35 00000000                 export           vec_swi_handler
   36 00000000                 export           vec_prefetch_handler
   37 00000000                 export           vec_abort_handler
   38 00000000                 export           vec_irq_handler
   39 00000000                 export           vec_fiq_handler
   40 00000000         



ARM Macro Assembler    Page 2 


   41 00000000                 export           lpc32xx_irq_handler
   42 00000000                 import           irq_func_ptrs
   43 00000000         
   44 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   45 00000000         ;
   46 00000000         ; Function: Basic interrupt and exception jump block
   47 00000000         ;
   48 00000000         ; Purpose: Block that defines the interrupt and exceptio
                       n jump points
   49 00000000         ;
   50 00000000         ; Description:
   51 00000000         ;     On a bootable image that is being built, this area
                        should be
   52 00000000         ;     linked to address 0x00000000. This area may be use
                       d with the
   53 00000000         ;     interrupt and exception drivers when installing ha
                       ndlers and
   54 00000000         ;     routers. For each interrupt and exception that get
                       s routed
   55 00000000         ;     here, the indirect PC value of the handler functio
                       n is loaded
   56 00000000         ;     to jump to that function.
   57 00000000         ;
   58 00000000         ; Parameters: NA
   59 00000000         ;
   60 00000000         ; Outputs; NA
   61 00000000         ;
   62 00000000         ; Returns: NA
   63 00000000         ;
   64 00000000         ; Notes: NA
   65 00000000         ;
   66 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   67 00000000         lpc32xx_reset_vector
   68 00000000 E59FF018        LDR              pc, [pc, #24] ; Get address of 
                                                            Reset handler
   69 00000004 E59FF018        LDR              pc, [pc, #24] ; Get address of 
                                                            Undefined handler
   70 00000008 E59FF018        LDR              pc, [pc, #24] ; Get address of 
                                                            SWI handler
   71 0000000C E59FF018        LDR              pc, [pc, #24] ; Get address of 
                                                            Prefetch handler
   72 00000010 E59FF018        LDR              pc, [pc, #24] ; Get address of 
                                                            Abort handler
   73 00000014 E1A00000        NOP                          ; Reserved
   74 00000018 E59FF014        LDR              pc, [pc, #20] ; Get address of 
                                                            IRQ handler
   75 0000001C E59FF014        LDR              pc, [pc, #20] ; Get address of 
                                                            FIQ handler
   76 00000020         
   77 00000020         vec_reset_handler
   78 00000020 00000000        DCD              lpc32xx_reset_handler
   79 00000024         
   80 00000024         vec_undefined_handler
   81 00000024 00000000        DCD              lpc32xx_undefined_handler
   82 00000028         
   83 00000028         vec_swi_handler
   84 00000028 00000000        DCD              lpc32xx_swi_handler



ARM Macro Assembler    Page 3 


   85 0000002C         
   86 0000002C         vec_prefetch_handler
   87 0000002C 00000000        DCD              lpc32xx_prefetch_handler
   88 00000030         
   89 00000030         vec_abort_handler
   90 00000030 00000000        DCD              lpc32xx_abort_handler
   91 00000034         
   92 00000034         vec_irq_handler
   93 00000034 00000000        DCD              lpc32xx_irq_handler
   94 00000038         
   95 00000038         vec_fiq_handler
   96 00000038 00000000        DCD              lpc32xx_fiq_handler
   97 0000003C         
   98 0000003C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   99 0000003C         ;
  100 0000003C         ;
  101 0000003C         ; Function: lpc32xx_reset_handler
  102 0000003C         ;
  103 0000003C         ; Purpose:
  104 0000003C         ;   Default reset handler
  105 0000003C         ; 
  106 0000003C         ; Processing:
  107 0000003C         ;   Loop forever
  108 0000003C         ;
  109 0000003C         ; Parameters: None
  110 0000003C         ;
  111 0000003C         ; Outputs:  None
  112 0000003C         ;
  113 0000003C         ; Returns: Nothing
  114 0000003C         ;
  115 0000003C         ; Notes:
  116 0000003C         ;     The board startup code does not use this handler! 
                       However, when
  117 0000003C         ;     the interrupt and exception table is installed, th
                       e reset handler
  118 0000003C         ;     will be updated to this handler.
  119 0000003C         ;
  120 0000003C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  121 0000003C         lpc32xx_reset_handler
  122 0000003C EAFFFFFE        B                lpc32xx_reset_handler
  123 00000040         
  124 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  125 00000040         ;
  126 00000040         ;
  127 00000040         ; Function: lpc32xx_undefined_handler
  128 00000040         ;
  129 00000040         ; Purpose:
  130 00000040         ;   Handle the undefined exception
  131 00000040         ; 
  132 00000040         ; Processing:
  133 00000040         ;   Loop forever
  134 00000040         ;
  135 00000040         ; Parameters: None
  136 00000040         ;
  137 00000040         ; Outputs:  None
  138 00000040         ;



ARM Macro Assembler    Page 4 


  139 00000040         ; Returns: Nothing
  140 00000040         ;
  141 00000040         ; Notes: None
  142 00000040         ;
  143 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  144 00000040         lpc32xx_undefined_handler
  145 00000040 EAFFFFFE        B                lpc32xx_undefined_handler
  146 00000044         
  147 00000044         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  148 00000044         ;
  149 00000044         ;
  150 00000044         ; Function: lpc32xx_swi_handler
  151 00000044         ;
  152 00000044         ; Purpose:
  153 00000044         ;   Handle the software interrupt
  154 00000044         ; 
  155 00000044         ; Processing:
  156 00000044         ;   Loop forever
  157 00000044         ;
  158 00000044         ; Parameters: None
  159 00000044         ;
  160 00000044         ; Outputs:  None
  161 00000044         ;
  162 00000044         ; Returns: Nothing
  163 00000044         ;
  164 00000044         ; Notes: None
  165 00000044         ;
  166 00000044         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  167 00000044         lpc32xx_swi_handler
  168 00000044 EAFFFFFE        B                lpc32xx_swi_handler
  169 00000048         
  170 00000048         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  171 00000048         ;
  172 00000048         ;
  173 00000048         ; Function: lpc32xx_prefetch_handler
  174 00000048         ;
  175 00000048         ; Purpose:
  176 00000048         ;   Handle the prefetch abort exception
  177 00000048         ; 
  178 00000048         ; Processing:
  179 00000048         ;   Loop forever
  180 00000048         ;
  181 00000048         ; Parameters: None
  182 00000048         ;
  183 00000048         ; Outputs:  None
  184 00000048         ;
  185 00000048         ; Returns: Nothing
  186 00000048         ;
  187 00000048         ; Notes: None
  188 00000048         ;
  189 00000048         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  190 00000048         lpc32xx_prefetch_handler
  191 00000048 EAFFFFFE        B                lpc32xx_prefetch_handler
  192 0000004C         



ARM Macro Assembler    Page 5 


  193 0000004C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  194 0000004C         ;
  195 0000004C         ;
  196 0000004C         ; Function: lpc32xx_abort_handler
  197 0000004C         ;
  198 0000004C         ; Purpose:
  199 0000004C         ;   Handle the abort exception
  200 0000004C         ; 
  201 0000004C         ; Processing:
  202 0000004C         ;   Loop forever
  203 0000004C         ;
  204 0000004C         ; Parameters: None
  205 0000004C         ;
  206 0000004C         ; Outputs:  None
  207 0000004C         ;
  208 0000004C         ; Returns: Nothing
  209 0000004C         ;
  210 0000004C         ; Notes: None
  211 0000004C         ;
  212 0000004C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  213 0000004C         lpc32xx_abort_handler
  214 0000004C EAFFFFFE        B                lpc32xx_abort_handler
  215 00000050         
  216 00000050         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  217 00000050         ;
  218 00000050         ;
  219 00000050         ; Function: lpc32xx_irq_handler
  220 00000050         ;
  221 00000050         ; Purpose:
  222 00000050         ;   Handle the IRQ interrupt
  223 00000050         ; 
  224 00000050         ; Processing:
  225 00000050         ;   Loop forever
  226 00000050         ;
  227 00000050         ; Parameters: None
  228 00000050         ;
  229 00000050         ; Outputs:  None
  230 00000050         ;
  231 00000050         ; Returns: Nothing
  232 00000050         ;
  233 00000050         ; Notes: None
  234 00000050         ;
  235 00000050         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  236 00000050         
  237 00000050         lpc32xx_irq_handler
  238 00000050 E24EE004        SUB              lr, lr, #4  ; Get return addres
                                                            s 
  239 00000054 E92D5FFF        STMFD            sp!, {r0-r12, lr} 
                                                            ; Save registers 
  240 00000058         
  241 00000058         ; Read the MIC interrupt status registers 
  242 00000058 E59F2068        LDR              r2, =MIC_BASE_ADDR
  243 0000005C E5923008        LDR              r3, [r2, #IRQ_STATUS_OFF]
  244 00000060 E3C33003        AND              r3, r3, #0xFFFFFFFC ; Mask off 
                                                            subIRQ bits



ARM Macro Assembler    Page 6 


  245 00000064 E3A04000        MOV              r4, #0
  246 00000068         
  247 00000068         ; If there the MIC IRQ status is 0, then there are no MI
                       C
  248 00000068         ; interrupts pending. That means, go service SIC1 interr
                       upts
  249 00000068         ; instead. 
  250 00000068         service_mic
  251 00000068 E3530000        CMP              r3, #0
  252 0000006C 1A000009        BNE              int_found
  253 00000070         ; The interrupt was not from MIC
  254 00000070         service_sic1
  255 00000070         ; Read the SIC1 interrupt status registers 
  256 00000070 E59F2054        LDR              r2, =SIC1_BASE_ADDR
  257 00000074 E5923008        LDR              r3, [r2, #IRQ_STATUS_OFF]
  258 00000078 E3A04020        MOV              r4, #32
  259 0000007C         
  260 0000007C         ; If there the SIC1 IRQ status is 0, then there are no S
                       IC1
  261 0000007C         ; interrupts pending. That means, go service SIC2 interr
                       upts
  262 0000007C         ; instead. 
  263 0000007C E3530000        CMP              r3, #0
  264 00000080 1A000004        BNE              int_found
  265 00000084         ; The interrupt was not from SIC1
  266 00000084         
  267 00000084         service_sic2
  268 00000084         ; Read the SIC2 interrupt status registers 
  269 00000084 E59F2044        LDR              r2, =SIC2_BASE_ADDR
  270 00000088 E5923008        LDR              r3, [r2, #IRQ_STATUS_OFF]
  271 0000008C E3A04040        MOV              r4, #64
  272 00000090 E3530000        CMP              r3, #0
  273 00000094 0A000009        BEQ              int_exit
  274 00000098         ; The interrupt was not from SIC2
  275 00000098         
  276 00000098         int_found
  277 00000098 E16F1F13        CLZ              r1, r3
  278 0000009C E261101F        RSB              r1, r1, #31
  279 000000A0 E0811004        ADD              r1, r1, r4
  280 000000A4 E59F0028        LDR              r0, =irq_func_ptrs ; Get addres
                                                            s of jump table 
  281 000000A8 E0800101        ADD              r0, r0, r1, LSL #2 ; Add by int
                                                            errupt offset 
  282 000000AC E5900000        LDR              r0, [r0]    ; Get handler addre
                                                            ss 
  283 000000B0 E3500000        CMP              r0, #0      ; Is handler addres
                                                            s NULL? 
  284 000000B4 0A000001        BEQ              int_exit    ; If null, the exit
                                                             
  285 000000B8 E1A0E00F        MOV              lr, pc      ; Will return to in
                                                            t_exit 
  286 000000BC E12FFF10        BX               r0          ; Jump to handler 
  287 000000C0         
  288 000000C0         int_exit
  289 000000C0 E8FD9FFF        LDMFD            sp!, {r0-r12, pc}^ ; Restore re
                                                            gisters and exit 
  290 000000C4         
  291 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;



ARM Macro Assembler    Page 7 


  292 000000C4         ;
  293 000000C4         ;
  294 000000C4         ; Function: lpc32xx_fiq_handler
  295 000000C4         ;
  296 000000C4         ; Purpose:
  297 000000C4         ;   Handle the FIQ interrupt
  298 000000C4         ; 
  299 000000C4         ; Processing:
  300 000000C4         ;   Loop forever
  301 000000C4         ;
  302 000000C4         ; Parameters: None
  303 000000C4         ;
  304 000000C4         ; Outputs:  None
  305 000000C4         ;
  306 000000C4         ; Returns: Nothing
  307 000000C4         ;
  308 000000C4         ; Notes: None
  309 000000C4         ;
  310 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
  311 000000C4         lpc32xx_fiq_handler
  312 000000C4 EAFFFFFE        B                lpc32xx_fiq_handler
  313 000000C8         
  314 000000C8 40008000 
                       MIC_BASE_ADDR
                               EQU              0x40008000  ; Base address of M
                                                            IC
  315 000000C8 4000C000 
                       SIC1_BASE_ADDR
                               EQU              0x4000C000  ; Base address of S
                                                            IC1
  316 000000C8 40010000 
                       SIC2_BASE_ADDR
                               EQU              0x40010000  ; Base address of S
                                                            IC2
  317 000000C8 00000008 
                       IRQ_STATUS_OFF
                               EQU              0x08        ; Offset to IRQ sta
                                                            tus 
  318 000000C8         
  319 000000C8                 END
              40008000 
              4000C000 
              40010000 
              00000000 
Command Line: --debug --xref --cpu=ARM926EJ-S --fpu=VFPv2 --apcs=interwork --de
pend=.\UV4Build\OBJ\lpc32xx_vectors.d -o.\UV4Build\OBJ\lpc32xx_vectors.o -ID:\W
orkProgram\Keil\ARM\RV31\INC -ID:\WorkProgram\Keil\ARM\CMSIS\Include -ID:\WorkP
rogram\Keil\ARM\Inc\Philips --predefine="__RTX SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="REMAP SETA 1" --list=.\UV4Build\LST\lpc32xx_vectors.lst ./
source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 28 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      None
Comment: .text unused
int_exit 000000C0

Symbol: int_exit
   Definitions
      At line 288 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 273 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 284 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

int_found 00000098

Symbol: int_found
   Definitions
      At line 276 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 252 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 264 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_abort_handler 0000004C

Symbol: lpc32xx_abort_handler
   Definitions
      At line 213 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 90 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 214 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_fiq_handler 000000C4

Symbol: lpc32xx_fiq_handler
   Definitions
      At line 311 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 96 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 312 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_irq_handler 00000050

Symbol: lpc32xx_irq_handler
   Definitions
      At line 237 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 41 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 93 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_prefetch_handler 00000048

Symbol: lpc32xx_prefetch_handler
   Definitions
      At line 190 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 87 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 191 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_reset_handler 0000003C

Symbol: lpc32xx_reset_handler
   Definitions
      At line 121 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 78 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 122 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_reset_vector 00000000

Symbol: lpc32xx_reset_vector
   Definitions
      At line 67 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 32 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: lpc32xx_reset_vector used once
lpc32xx_swi_handler 00000044

Symbol: lpc32xx_swi_handler
   Definitions
      At line 167 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 84 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 168 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

lpc32xx_undefined_handler 00000040

Symbol: lpc32xx_undefined_handler
   Definitions
      At line 144 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 81 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 145 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

service_mic 00000068

Symbol: service_mic
   Definitions
      At line 250 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      None
Comment: service_mic unused
service_sic1 00000070

Symbol: service_sic1
   Definitions
      At line 254 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      None
Comment: service_sic1 unused
service_sic2 00000084

Symbol: service_sic2
   Definitions
      At line 267 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: service_sic2 unused
vec_abort_handler 00000030

Symbol: vec_abort_handler
   Definitions
      At line 89 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 37 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_abort_handler used once
vec_fiq_handler 00000038

Symbol: vec_fiq_handler
   Definitions
      At line 95 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 39 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_fiq_handler used once
vec_irq_handler 00000034

Symbol: vec_irq_handler
   Definitions
      At line 92 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 38 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_irq_handler used once
vec_prefetch_handler 0000002C

Symbol: vec_prefetch_handler
   Definitions
      At line 86 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 36 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_prefetch_handler used once
vec_reset_handler 00000020

Symbol: vec_reset_handler
   Definitions
      At line 77 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 33 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_reset_handler used once
vec_swi_handler 00000028

Symbol: vec_swi_handler
   Definitions
      At line 83 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 35 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_swi_handler used once
vec_undefined_handler 00000024

Symbol: vec_undefined_handler
   Definitions
      At line 80 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 34 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: vec_undefined_handler used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IRQ_STATUS_OFF 00000008

Symbol: IRQ_STATUS_OFF
   Definitions
      At line 317 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 243 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 257 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
      At line 270 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s

MIC_BASE_ADDR 40008000

Symbol: MIC_BASE_ADDR
   Definitions
      At line 314 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 242 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: MIC_BASE_ADDR used once
SIC1_BASE_ADDR 4000C000

Symbol: SIC1_BASE_ADDR
   Definitions
      At line 315 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 256 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: SIC1_BASE_ADDR used once
SIC2_BASE_ADDR 40010000

Symbol: SIC2_BASE_ADDR
   Definitions
      At line 316 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 269 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: SIC2_BASE_ADDR used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

irq_func_ptrs 00000000

Symbol: irq_func_ptrs
   Definitions
      At line 42 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
   Uses
      At line 280 in file ./source/HAL/lib/LPC32xx/source/lpc32xx_vectors.s
Comment: irq_func_ptrs used once
1 symbol
362 symbols in table
